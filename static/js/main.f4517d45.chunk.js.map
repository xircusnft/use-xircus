{"version":3,"sources":["../../src/useStore.js","../../src/index.js","hooks/useGlobal.js","App.js","index.js"],"names":["setState","store","newState","afterUpdateCallback","listener","Object","s","useCustom","React","mapState","mapActions","initState","fields","originalHook","state","actions","newListener","oldState","Date","mappedState","globalStore","initialState","initializer","listeners","associateActions","associatedActions","key","useGlobal","username","update","App","onClick","ReactDOM","render","document","getElementById"],"mappings":"+jEAAA,SAASA,EAASC,EAAOC,EAAUC,GACjCF,eAAmBA,EAAnBA,UACAA,qBAAwB,YAClBG,OAAgBA,aAApB,EAEMC,OAAA,gBAA6B,SAAAC,GAAC,OAAIF,eAAJ,MAA9B,OAAJ,GACEA,MAAaH,EAAbG,OAGFA,MAAaH,EAAbG,UAGJD,GAAuBA,EAZ+B,GAexD,SAASI,EAAUN,EAAOO,EAAOC,EAAUC,EAAYC,EAAWC,GAChE,IAASC,EAAT,EAAyBL,WAAzB,SACMM,EAAQL,EAAWA,EAASR,EAAZ,OAA2BA,EAAjD,MACMc,EAAUP,EAAA,SACd,kBAAOE,EAAaA,EAAWT,EAAd,SAA+BA,EAAhD,UACA,CAACS,EAAYT,EAFf,UA2BA,OAtBAO,aAAgB,WACd,IAAMQ,EAAc,CAAEC,SAAU,IAchC,OAbAD,MAAiB,IAAIE,MAArBF,UACAA,MAAkBJ,GAAlBI,GACAA,MAAkBP,EACd,SAAAP,GACE,IAAMiB,EAAcV,EAApB,GACIU,IAAgBH,EAApB,WACEA,aACAH,OALRG,EASAf,oBACAe,MAAgBf,EAAhBe,OACO,WACLf,YAAkBA,EAAA,kBAChB,SAAAG,GAAQ,OAAIA,IAAJ,QAzB0D,IA8BjE,CAACU,EAAR,GAgBF,ICzDaM,EDyDI,SAACZ,EAAOa,EAAcN,EAASO,GAC9C,IAAMrB,EAAQ,CAAEa,MAAF,EAAuBS,UAAW,IAIhD,OAHAtB,WAAiBD,YAAjBC,GACAA,UAhBF,SAASuB,EAAiBvB,EAAOc,GAC/B,IAAMU,EAAN,GASA,OARApB,wBAA6B,SAAAqB,GAC3B,oBAAWX,EAAP,KACFU,KAAyBV,eAAzBU,IAEF,WAAI,EAAOV,EAAP,MACFU,KAAyBD,EAAiBvB,EAAOc,EAAjDU,QAGJ,EAMgBD,CAAiBvB,EAAjCA,GACA,GAAiBqB,EAJ6C,GAKvDf,0BAAP,IEnDaoB,EAFGP,EAAYZ,EAJT,CACnBoB,SAAU,aAPI,CACdC,OAAQ,SAAC5B,GACPA,EAAMD,SAAS,CAAE4B,SAAU,kBCQhBE,EAVH,WACV,MAAyBH,EAAU,CAAC,aAApC,mBAAOb,EAAP,KAAcC,EAAd,KAEA,OACE,6BACE,4BAAKD,EAAMc,UACX,4BAAQG,QAAS,kBAAMhB,EAAQc,WAA/B,YCHNG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f4517d45.chunk.js","sourcesContent":["function setState(store, newState, afterUpdateCallback) {\n  store.state = { ...store.state, ...newState };\n  store.listeners.forEach((listener) => {\n    if (listener.fds && listener.fds.length > 0) {\n      // run if has specific keys to listen\n      if (Object.keys(newState).filter(s => listener.fds.includes(s)).length > 0) {\n        listener.run(store.state)\n      }\n    } else {\n      listener.run(store.state)\n    }\n  })\n  afterUpdateCallback && afterUpdateCallback(store) // return with new store and state\n}\n\nfunction useCustom(store, React, mapState, mapActions, initState, fields) {\n  const [, originalHook] = React.useState(initState);\n  const state = mapState ? mapState(store.state) : store.state;\n  const actions = React.useMemo(\n    () => (mapActions ? mapActions(store.actions) : store.actions),\n    [mapActions, store.actions]\n  )\n\n  React.useEffect(() => {\n    const newListener = { oldState: {} };\n    newListener.id = new Date().getTime()\n    newListener.fds = fields || []\n    newListener.run = mapState\n      ? newState => {\n          const mappedState = mapState(newState);\n          if (mappedState !== newListener.oldState) {\n            newListener.oldState = mappedState;\n            originalHook(mappedState);\n          }\n        }\n      : originalHook;\n    store.listeners.push(newListener);\n    newListener.run(store.state);\n    return () => {\n      store.listeners = store.listeners.filter(\n        listener => listener !== newListener\n      );\n    };\n  }, []); // eslint-disable-line\n\n  return [state, actions];\n}\n\nfunction associateActions(store, actions) {\n  const associatedActions = {};\n  Object.keys(actions).forEach(key => {\n    if (typeof actions[key] === \"function\") {\n      associatedActions[key] = actions[key].bind(null, store);\n    }\n    if (typeof actions[key] === \"object\") {\n      associatedActions[key] = associateActions(store, actions[key]);\n    }\n  });\n  return associatedActions;\n}\n\nconst useStore = (React, initialState, actions, initializer) => {\n  const store = { state: initialState, listeners: [] }\n  store.setState = setState.bind(null, store)\n  store.actions = associateActions(store, actions)\n  if (initializer) initializer(store) // asyncronously load the state\n  return useCustom.bind(null, store, React, null, null, initialState)\n}\n\nexport default useStore;\n","import * as React from 'react'\nimport * as xStore from './useStore';\nimport * as xGraph from './useGraph';\n\nexport const globalStore = xStore.default;\nexport const useGraph = xGraph.default;\n","import * as React from 'react';\nimport { globalStore } from 'use-xircus';\n\nconst actions = {\n  update: (store) => {\n    store.setState({ username: 'xircusteam' })\n  }\n}\n\nconst initialState = {\n  username: 'xircusdev'\n}\n\nconst useGlobal = globalStore(React, initialState, actions)\n\nexport default useGlobal;\n","import React from 'react'\nimport useGlobal from './hooks/useGlobal';\n\nconst App = () => {\n  const [state, actions] = useGlobal(['username'])\n\n  return (\n    <div>\n      <h1>{state.username}</h1>\n      <button onClick={() => actions.update()}>Update</button>\n    </div>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}